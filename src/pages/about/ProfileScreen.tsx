import React, { useCallback, useState } from 'react';
import {
  View,
  StyleSheet,
  ScrollView,
  StatusBar,
  Alert,
  ActivityIndicator,
} from 'react-native';
import ProfileHeader from '../../component/about/ProfileHeader.tsx';
import MenuSection from '../../component/about/MenuSection.tsx';
import { MenuSectionType } from '../../types';
import userService from '../../services/userService.ts';
import { Profile } from '../../types/profile.ts';
import { useFocusEffect } from '@react-navigation/native';

const ProfileScreen: React.FC = () => {
  const [convenientMode, setConvenientMode] = useState(true);
  const [profileData, setProfileData] = useState<Profile | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useFocusEffect(
    useCallback(() => {
      const fetchProfile = async () => {
        try {
          const profileFromApi = await userService.getMyProfile();

          if (profileFromApi) {
            const mappedProfile: Profile = {
              name: profileFromApi.name,
              profileImage: profileFromApi.avatar,
              locketUrl: profileFromApi.email,
            };
            setProfileData(mappedProfile);
          } else {
            throw new Error('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu profile.');
          }

        } catch (error: any) {
          Alert.alert('L·ªói', error.message || 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin c√° nh√¢n.');
        } finally {
          setIsLoading(false);
        }
      };

      setIsLoading(true);
      fetchProfile();
    }, [])
  );

  const handleEditPhoto = () => {
    // Navigate to photo editing screen
    console.log('Edit photo pressed');
  };

  const handleShareLocket = () => {
    // Share locket functionality
    console.log('Share locket pressed');
  };

  const menuSections: MenuSectionType[] = [
    {
      title: 'Thi·∫øt l·∫≠p Ti·ªán √≠ch',
      items: [
        {
          id: '1',
          title: 'Th√™m Ti·ªán √≠ch',
          icon: '+',
          onPress: () => console.log('Add widget'),
        },
        {
          id: '2',
          title: 'C√°ch th√™m ti·ªán √≠ch',
          icon: '?',
          onPress: () => console.log('How to add widget'),
        },
        {
          id: '3',
          title: 'Chu·ªói tr√™n ti·ªán √≠ch',
          icon: 'üè†',
          onPress: () => setConvenientMode(!convenientMode),
          isToggle: true,
          isToggled: convenientMode,
        },
      ],
    },
    {
      title: 'T·ªïng qu√°t',
      items: [
        {
          id: '4',
          title: 'S·ª≠a t√™n',
          icon: 'üë§',
          onPress: () => console.log('Edit name'),
        },
        {
          id: '5',
          title: 'Thay ƒë·ªïi s·ªë ƒëi·ªán tho·∫°i',
          icon: 'üìû',
          onPress: () => console.log('Change phone'),
        },
        {
          id: '6',
          title: 'Thay ƒë·ªïi ƒë·ªãa ch·ªâ email',
          icon: '‚úâÔ∏è',
          onPress: () => console.log('Change email'),
        },
      ],
    },
    {
      title: 'H·ªó tr·ª£',
      items: [
        {
          id: '7',
          title: 'G·ª≠i ƒë·ªÅ xu·∫•t',
          icon: '+',
          onPress: () => console.log('Send suggestion'),
        },
        {
          id: '8',
          title: 'B√°o c√°o s·ª± c·ªë',
          icon: '!',
          onPress: () => console.log('Report issue'),
        },
      ],
    },
    {
      title: 'Ri√™ng t∆∞ & b·∫£o m·∫≠t',
      items: [
        {
          id: '9',
          title: 'Hi·ªÉn th·ªã t√†i kho·∫£n',
          icon: 'üëÅ',
          onPress: () => console.log('Show account'),
        },
      ],
    },
    {
      title: 'Gi·ªõi thi·ªáu',
      items: [
        {
          id: '10',
          title: 'TikTok',
          icon: 'üéµ',
          onPress: () => console.log('TikTok'),
        },
        {
          id: '11',
          title: 'Instagram',
          icon: 'üì∑',
          onPress: () => console.log('Instagram'),
        },
        {
          id: '12',
          title: 'X (Twitter)',
          icon: 'üê¶',
          onPress: () => console.log('Twitter'),
        },
        {
          id: '13',
          title: 'Chia s·∫ª Locket',
          icon: 'üîó',
          onPress: () => console.log('Share Locket'),
        },
        {
          id: '14',
          title: 'ƒê√°nh gi√° Locket',
          icon: '‚≠ê',
          onPress: () => console.log('Rate Locket'),
        },
        {
          id: '15',
          title: 'ƒêi·ªÅu kho·∫£n d·ªãch v·ª•',
          icon: 'üìÑ',
          onPress: () => console.log('Terms of service'),
        },
        {
          id: '16',
          title: 'Ch√≠nh s√°ch quy·ªÅn ri√™ng t∆∞',
          icon: 'üîí',
          onPress: () => console.log('Privacy policy'),
        },
      ],
    },
    {
      title: 'V√πng nguy hi·ªÉm',
      items: [
        {
          id: '17',
          title: 'X√≥a t√†i kho·∫£n',
          icon: 'üóë',
          onPress: () => {
            Alert.alert(
              'X√≥a t√†i kho·∫£n',
              'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t√†i kho·∫£n kh√¥ng?',
              [
                { text: 'H·ªßy', style: 'cancel' },
                { text: 'X√≥a', style: 'destructive' },
              ]
            );
          },
          isDanger: true,
        },
        {
          id: '18',
          title: 'ƒêƒÉng xu·∫•t',
          icon: 'üëã',
          onPress: () => {
            Alert.alert(
              'ƒêƒÉng xu·∫•t',
              'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t kh√¥ng?',
              [
                { text: 'H·ªßy', style: 'cancel' },
                { text: 'ƒêƒÉng xu·∫•t', style: 'destructive' },
              ]
            );
          },
        },
      ],
    },
  ];

  if (isLoading) {
    return (
      <View style={[styles.container, styles.centerContent]}>
        <StatusBar barStyle="light-content" backgroundColor="#000000" />
        <ActivityIndicator size="large" color="#ffb700" />
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <StatusBar barStyle="light-content" backgroundColor="#000000" />
      <ScrollView
        style={styles.scrollView}
        showsVerticalScrollIndicator={false}
      >
        {profileData && (
          <ProfileHeader
            name={profileData.name}
            profileImage={profileData.profileImage}
            locketUrl={profileData.locketUrl}
            onEditPhoto={handleEditPhoto}
            onShareLocket={handleShareLocket}
          />
        )}

        {menuSections.map((section, index) => (
          <MenuSection
            key={index}
            title={section.title}
            items={section.items}
          />
        ))}

        <View style={styles.bottomSpacer} />
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000000',
  },
  scrollView: {
    flex: 1,
  },
  bottomSpacer: {
    height: 50,
  },
  centerContent: {
    justifyContent: 'center',
    alignItems: 'center',
  },
});

export default ProfileScreen;